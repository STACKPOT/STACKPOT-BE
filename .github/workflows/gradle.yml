name: Java CI/CD with Gradle and Docker

on:
  push:
    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Set environment variables
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> $GITHUB_ENV
          echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> $GITHUB_ENV
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> $GITHUB_ENV
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> $GITHUB_ENV
          echo "URL=${{ secrets.URL }}" >> $GITHUB_ENV
          echo "OPEN_API_KEY=${{ secrets.OPEN_API_KEY }}" >> $GITHUB_ENV
          echo "USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV

      - name: Build with Gradle Wrapper (Skipping Tests)
        run: ./gradlew build -x test

      - name: Docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/stackpot-be-spring .

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker image push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/stackpot-be-spring

  deploy:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
    
      - name: Pull latest Docker image
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/stackpot-be-spring

      - name: Stop and remove existing Spring container
        run: |
          docker stop spring || true
          docker rm spring || true
          docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/stackpot-be-spring || true


      - name: Run Spring container
        run: |

          docker run -d --name spring --network stackpot-network \
            --env-file /home/ubuntu/STACKPOT-BE/.env \
            -p 8080:8080 \
            ${{ secrets.DOCKERHUB_USERNAME }}/stackpot-be-spring


      - name: Stop and remove existing Nginx container
        run: |
          docker stop nginx || true
          docker rm nginx || true

      - name: Run Nginx container
        run: |
          docker run -d \
            --name nginx --network stackpot-network \
            -p 80:80 -p 443:443 \
            -v /home/ubuntu/STACKPOT-BE/certbot/conf:/etc/letsencrypt \
            -v /home/ubuntu/STACKPOT-BE/certbot/www:/var/www/certbot \
            -v /home/ubuntu/STACKPOT-BE/nginx/conf.d:/etc/nginx/conf.d \
            nginx:1.15-alpine

      - name: Run Certbot container
        run: |
          docker stop stackpot-be_certbot_1 || true
          docker rm stackpot-be_certbot_1 || true
          docker run --name stackpot-be_certbot_1 \
            -v /home/ubuntu/STACKPOT-BE/certbot/conf:/etc/letsencrypt \
            -v /home/ubuntu/STACKPOT-BE/certbot/www:/var/www/certbot \
            certbot/certbot renew

      - name: Verify running containers
        run: docker ps -a


      
      - name: Clean up Docker system
        run: docker system prune -f
