name: Java CI/CD with Gradle and Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    # 코드 체크아웃
    - uses: actions/checkout@v4

    # Java와 Gradle 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    # 3. 환경 변수 설정
    - name: Set environment variables
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
        echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> $GITHUB_ENV
        echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "mail.password=${{ secrets.MAIL_PASSWORD }}" >> $GITHUB_ENV
        echo "mail.username=${{ secrets.MAIL_USERNAME }}" >> $GITHUB_ENV
        echo "PASSWORD=${{ secrets.PASSWORD }}" >> $GITHUB_ENV
        echo "URL=${{ secrets.URL }}" >> $GITHUB_ENV
        echo "OPEN_API_KEY=${{ secrets.OPEN_API_KEY }}" >> $GITHUB_ENV
        echo "USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV
    # Spring Boot 어플리케이션 빌드
    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # Docker 이미지 빌드
    - name: Docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/stackpot-be-spring .

    # DockerHub 로그인
    - name: Docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Docker 이미지 푸시
    - name: Docker image push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/stackpot-be-spring

  deploy:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
    - name: Pull Spring image
      run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/stackpot-be-spring

    # Spring 컨테이너 실행
    - name: Run Spring container
      run: |
        docker stop spring || true
        docker rm spring || true
        docker run -d --name spring -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/stackpot-be-spring

    # Nginx 컨테이너 실행
    - name: Run Nginx container
      run: |
        docker stop nginx || true
        docker rm nginx || true
        docker run -d \
          --name nginx \
          -p 80:80 \
          -p 443:443 \
          -v ./nginx/conf.d:/etc/nginx/conf.d \
          -v ./certbot/conf:/etc/letsencrypt \
          -v ./certbot/www:/var/www/certbot \
          nginx:1.15-alpine

    # Certbot 컨테이너 실행
    - name: Run Certbot container
      run: |
        docker stop stackpot-be_certbot_1 || true
        docker rm stackpot-be_certbot_1 || true
        docker run --rm \
        --name stackpot-be_certbot_1 \
        -v ./certbot/conf:/etc/letsencrypt \
        -v ./certbot/www:/var/www/certbot \
        nginx:1.15-alpine
    # Docker 이미지 및 컨테이너 정리
    - name: Clean up Docker system
      run: docker system prune -f

