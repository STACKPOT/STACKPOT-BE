name: Java CI/CD with Gradle and Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v4

      # Java와 Gradle 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 환경 변수 설정 및 .env 파일 생성
      - name: Generate .env file
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
          echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> .env
          echo "URL=${{ secrets.URL }}" >> .env
          echo "OPEN_API_KEY=${{ secrets.OPEN_API_KEY }}" >> .env
          echo "USERNAME=${{ secrets.USERNAME }}" >> .env

      # Spring Boot 어플리케이션 빌드
      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Docker image build
        run: docker build --env-file .env -t ${{ secrets.DOCKERHUB_USERNAME }}/stackpot-be-spring .


      # DockerHub 로그인
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker 이미지 푸시
      - name: Docker image push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/stackpot-be-spring

  deploy:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      - name: Run Spring container
        run: |
          docker stop spring || true
          docker rm spring || true
          docker run -d --name spring --network stackpot-network \
            -p 8080:8080 \
            --env-file .env \
            ${{ secrets.DOCKERHUB_USERNAME }}/stackpot-be-spring

      # Nginx 컨테이너 실행
      - name: Run Nginx container
        run: |
          docker stop nginx || true
          docker rm nginx || true
          docker run -d \
            --name nginx --network stackpot-network \
            -p 80:80 -p 443:443 \
            -v /home/ubuntu/STACKPOT-BE/certbot/conf:/etc/letsencrypt \
            -v /home/ubuntu/STACKPOT-BE/certbot/www:/var/www/certbot \
            -v /home/ubuntu/STACKPOT-BE/nginx/conf.d:/etc/nginx/conf.d \
            nginx:1.15-alpine

      # Docker 이미지 및 컨테이너 정리
      - name: Clean up Docker system
        run: docker system prune -f

